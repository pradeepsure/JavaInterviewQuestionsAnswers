Serialization
==============
Serialization in Java is a mechanism of writing the state of an object into a byte stream
It is mainly used in Hibernate, RMI, JPA, EJB and JMS technologies.

Serializable is a marker interface (has no data member and method). It is used to "mark" Java classes so that objects of these classes may get the certain capability. The Cloneable and Remote are also marker interfaces.
It must be implemented by the class whose object you want to persist.

Student s1 =new Student(211,"ravi");  
  
  FileOutputStream fout=new FileOutputStream("f.txt");  
  ObjectOutputStream out=new ObjectOutputStream(fout);  
  
  out.writeObject(s1);  
  out.flush();  
  
Deserialization
=================
Deserialization is the process of reconstructing the object from the serialized state.It is the reverse operation of serialization.
ObjectInputStream in=new ObjectInputStream(new FileInputStream("f.txt"));  
  Student s=(Student)in.readObject();  
  System.out.println(s.id+" "+s.name); 
  
Java Serialization with Inheritance (IS-A Relationship)
============
If a class implements serializable then all its sub classes will also be serializable.
  
Java Serialization with Aggregation (HAS-A Relationship)
================
If a class has a reference to another class, all the references must be Serializable otherwise serialization process will not be performed.
In such case, NotSerializableException is thrown at runtime.

Java Serialization with the static data member
=================
If there is any static data member in a class, it will not be serialized because static is the part of class not object.

Java Serialization with array or collection
================
Rule: In case of array or collection, all the objects of array or collection must be serializable. If any object is not serialiizable, serialization will be failed.


Transient
===========
If you define any data member as transient, it will not be serialized.
At the time of serialization jvm ignores the original value and store some default value.
Transient means not to serialize

System.out.println(s.id+" "+s.name+" "+s.age);  
here age is transient
211 ravi 0

Customized Serialization
========================
If we define transient then we will lose it after deserialization.
using following 2 methods we can achive it
Below are executed automatically by JVM
At the time of serialization JVM will check if writeObject() available in the class where transient/serializable is used.

private void writeObject(ObjectOutputStream os) throws Exception{
os.defaultWriteObject();
String epwd = "123"+pwd;
os=epwd.writeObject(epwd);
}

private void readObject(ObjectInputStream is) throws Exception{
is.defaultReadObject();
String epwd = (String)is.readObject();
pwd=epwd.substring(3);
}


Externalizable 
=================
In serialization total object will be serialized, but if we want a part of it to serialize the we go for Externalizable
The Externalizable interface provides two methods:

public void writeExternal(ObjectOutput out) throws IOException
public void readExternal(ObjectInput in) throws IOException

Every Externalizable class must need public no-arg constructor otherwise InvalidClassCast exception


serialVersionUID
================
At time of serialization jvm will save the id with object
At time of deserialization, jvm will compare the id,if matches the object will be deserialized.

Better we configure the id as
private static final long serialVersionUID = 1L;