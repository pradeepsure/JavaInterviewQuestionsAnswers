Servlet technology is used to create a web application (resides at server side and generates a dynamic web page).

Servlet Interface
=================
Servlet interface needs to be implemented for creating any servlet (either directly or indirectly). 
It provides 3 life cycle methods that are used to initialize the servlet, to service the requests, 
and to destroy the servlet and 2 non-life cycle methods.

Method										Description
public void init(ServletConfig config)		initializes the servlet. It is the life cycle method of servlet and invoked by the web container only once.
public void service(ServletRequest request,ServletResponse response)	provides response for the incoming request. It is invoked at each request by the web container.
public void destroy()						is invoked only once and indicates that servlet is being destroyed.
public ServletConfig getServletConfig()		returns the object of ServletConfig.
public String getServletInfo()	returns 	information about servlet such as writer, copyright, version etc.

HttpServlet Example
===================
public class DemoServlet extends HttpServlet{  
public void doGet(HttpServletRequest req,HttpServletResponse res)  
throws ServletException,IOException  
{  
res.setContentType("text/html");//setting the content type  
PrintWriter pw=res.getWriter();//get the stream to write the data  
  
//writing html in the stream  
pw.println("<html><body>");  
pw.println("Welcome to servlet");  
pw.println("</body></html>");  
  
pw.close();//closing the stream  
}}


Servlet Life Cycle
==================
Servlet class is loaded
=========
The classloader is responsible to load the servlet class. The servlet class is loaded when the first request for the servlet 
is received by the web container.

Servlet instance is created.
=======
The web container creates the instance of a servlet after loading the servlet class. 
The servlet instance is created only once in the servlet life cycle.

init method is invoked.
======
The web container calls the init method only once after creating the servlet instance. 
The init method is used to initialize the servlet. It is the life cycle method of the javax.servlet.Servlet interface.
public void init(ServletConfig config) throws ServletException

service method is invoked
=========================
The web container calls the service method each time when request for the servlet is received. 
If servlet is not initialized, it follows the first three steps as described above then calls the service method. If servlet is initialized, it calls the service method. 
public void service(ServletRequest request, ServletResponse response)   
  throws ServletException, IOException 
  
destroy method is invoked.
=========
The web container calls the destroy method before removing the servlet instance from the service. 
It gives the servlet an opportunity to clean up any resource for example memory, thread etc
public void destroy() 


How web container handles the servlet request?
=================
The web container is responsible to handle the request. Let's see how it handles the request.

maps the request with the servlet in the web.xml file.
creates request and response objects for this request
calls the service method on the thread
The public service method internally calls the protected service method
The protected service method calls the doGet method depending on the type of request.
The doGet method generates the response and it is passed to the client.
After sending the response, the web container deletes the request and response objects. The thread is contained in the thread pool or deleted depends on the server implementation.


load on startup in web.xml
=================
The load-on-startup element of web-app loads the servlet at the time of deployment or server start if value is positive. 
It is also known as pre initialization of servlet.

Advantage of load-on-startup element
====
As you know well, servlet is loaded at first request. That means it consumes more time at first request. 
If you specify the load-on-startup in web.xml, servlet will be loaded at project deployment time or server start. 
So, it will take less time for responding to first request.

If you pass the negative value, servlet will be loaded at request time, at first request.


ServletRequest Interface
==============
An object of ServletRequest is used to provide the client request information to a servlet such as content type, 
content length, parameter names and values, header informations, attributes etc.

RequestDispatcher in Servlet
================
The RequestDispatcher interface provides the facility of dispatching the request to another resource it may be html, servlet or jsp.
This interface can also be used to include the content of another resource also. It is one of the way of servlet collaboration.

public void forward(ServletRequest request,ServletResponse response)throws ServletException,java.io.IOException:
Forwards a request from a servlet to another resource (servlet, JSP file, or HTML file) on the server.

public void include(ServletRequest request,ServletResponse response)throws ServletException,java.io.IOException:
Includes the content of a resource (servlet, JSP page, or HTML file) in the response.

SendRedirect in servlet
==========
The sendRedirect() method of HttpServletResponse interface can be used to redirect response to another resource,
it may be servlet, jsp or html file.

ServletConfig Interface
============
An object of ServletConfig is created by the web container for each servlet. This object can be used to get configuration information from web.xml file.

If the configuration information is modified from the web.xml file, we don't need to change the servlet. 
So it is easier to manage the web application if any specific content is modified from time to time.


Syntax to provide the initialization parameter for a servlet

<web-app>  
  <servlet>  
    ......  
      
    <init-param>  
      <param-name>parametername</param-name>  
      <param-value>parametervalue</param-value>  
    </init-param>  
    ......  
  </servlet>  
</web-app>  


ServletContext Interface
============
An object of ServletContext is created by the web container at time of deploying the project. This object can be used to get configuration information from web.xml file. There is only one ServletContext object per web application.

If any information is shared to many servlet, it is better to provide it from the web.xml file using the <context-param> element.

<web-app>  
 ......  
      
  <context-param>  
    <param-name>parametername</param-name>  
    <param-value>parametervalue</param-value>  
  </context-param>  
 ......  
</web-app>  


Session Tracking in Servlets
===============
Session simply means a particular interval of time.

Session Tracking is a way to maintain state (data) of an user. It is also known as session management in servlet.

There are four techniques used in Session tracking:
Cookies
=====
By default, each request is considered as a new request. In cookies technique, we add cookie with response from the servlet. 
So cookie is stored in the cache of the browser. After that if request is sent by the user, cookie is added with request by default. 
Thus, we recognize the user as the old user.

Cookie ck=new Cookie("user","sonoo jaiswal");//creating cookie object  
response.addCookie(ck);//adding cookie in the response 

Cookie ck=new Cookie("user","");//deleting value of cookie  
ck.setMaxAge(0);//changing the maximum age to 0 seconds  
response.addCookie(ck);//adding cookie in the response


Hidden Form Field
========
In case of Hidden Form Field a hidden (invisible) textfield is used for maintaining the state of an user.

URL Rewriting
========
In URL rewriting, we append a token or identifier to the URL of the next Servlet or the next resource. 
We can send parameter name/value pairs using the following format:

url?name1=value1&name2=value2&??

HttpSession
=======
In such case, container creates a session id for each user.The container uses this id to identify the particular user.An object of HttpSession can be used to perform two tasks:

bind objects
view and manipulate information about a session, such as the session identifier, creation time, and last accessed time.


