Java sleep() and wait() Yield()
===============================

sleep() is a method which is used to pause the process for few seconds or the time we want to. 

But in case of wait() method, thread goes in waiting state and it won’t come back automatically until we call the notify() or notifyAll().

wait() releases the lock or monitor while sleep() doesn’t releases the lock or monitor while waiting.

wait() is used for inter-thread communication while sleep() is used to introduce pause on execution, generally.

sleep() – for time-synchronization
wait() – for multi-thread-synchronization.

yield() method pauses the currently executing thread temporarily for giving a chance to the remaining waiting threads of the same priority to execute. 
If there is no waiting thread or all the waiting threads have a lower priority then the same thread will continue its execution. 
The yielded thread when it will get the chance for execution is decided by the thread scheduler whose behavior is vendor dependent.


Spring Boot
============
It is a Spring module which provides RAD (Rapid Application Development) feature to Spring framework.

It is used to create stand alone spring based application that you can just run because it needs very little spring configuration.

Spring Boot does not generate code and there is absolutely no requirement for XML configuration.

Advantages of Spring Boot
=========================
Create stand-alone Spring applications that can be started using java -jar.
Embed Tomcat, Jetty or Undertow directly. You don't need to deploy WAR files.
It provides opinionated 'starter' POMs to simplify your Maven configuration.
It automatically configure Spring whenever possible.
It provides production-ready features such as metrics, health checks and externalized configuration.
Absolutely no code generation and no requirement for XML configuration.

Spring Initializr
=================
It is a web tool which is provided by Spring on official site. You can create Spring Boot project by providing project details.

Spring Boot Features
Web Development
SpringApplication
Application events and listeners
Admin features
Externalized Configuration
Properties Files
YAML Support
Type-safe Configuration
Logging
Security

Starter Packs
==============
<dependency>  
            <groupId>org.springframework.boot</groupId>  
            <artifactId>spring-boot-starter-web</artifactId>  
        </dependency>  

<dependency>  
            <groupId>org.springframework.boot</groupId>  
            <artifactId>spring-boot-starter-test</artifactId>  
            <scope>test</scope>  
        </dependency>  
    </dependencies>  

<parent>  
        <groupId>org.springframework.boot</groupId>  
        <artifactId>spring-boot-starter-parent</artifactId>  
        <version>2.0.0.BUILD-SNAPSHOT</version>  
        <relativePath/><!-- lookup parent from repository -->  
    </parent>  

 <build>  
        <plugins>  
            <plugin>  
                <groupId>org.springframework.boot</groupId>  
                <artifactId>spring-boot-maven-plugin</artifactId>  
            </plugin>  
        </plugins>  
    </build>  


Spring Applications
===================
import org.springframework.boot.SpringApplication;  
import org.springframework.boot.autoconfigure.SpringBootApplication;  
import org.springframework.web.bind.annotation.RequestMapping;  
@SpringBootApplication  
public class SpringBootExampleApplication {  
    public static void main(String[] args) {  
        SpringApplication.run(SpringBootExampleApplication.class, args);  
    }  
}  

@SpringBootApplication Annotation
=================================
@EnableAutoConfiguration: enable Spring Boot’s auto-configuration mechanism
@ComponentScan: enable @Component scan on the package where the application is located
@Configuration: allow to register extra beans in the context or import additional configuration classes

The SpringApplication, inside the main is a Spring Boot class. It is used to bootstrap our application. 
It calls static method run() which takes two arguments, one is class type and second is string array. 
It starts auto-configured tomcat web server when Spring application is started.


Spring Boot Actuator
====================
<dependencies>  
    <dependency>  
        <groupId>org.springframework.boot</groupId>  
        <artifactId>spring-boot-starter-actuator</artifactId>  
    </dependency>  
</dependencies> 

Spring Boot provides actuator to monitor and manage our application. Actuator is a tool which has HTTP endpoints. 
when application is pushed to production, you can choose to manage and monitor your application using HTTP endpoints.

To get production-ready features, we should use spring-boot-actuator module. We can enable this feature by adding it to the pom.xml file.


Spring Boot Application Properties
====================================
Spring Boot provides various properties which can be specified inside our project's application.properties file. These properties have default values and you can set that inside the properties file. Properties are used to set values like: server-port number, database connection configuration etc.