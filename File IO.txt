Java I/O (Input and Output) is used to process the input and produce the output.

In Java, 3 streams are created for us automatically. All these streams are attached with the console.

1) System.out: standard output stream

2) System.in: standard input stream

3) System.err: standard error stream
OutputStream
Java application uses an output stream to write data to a destination; it may be a file, an array, peripheral device or socket.
1) public void write(int)throws IOException	
2) public void write(byte[])throws IOException
3) public void flush()throws IOException
4) public void close()throws IOException

InputStream
1) public abstract int read()throws IOException.
2) public int available()throws IOException
3) public void close()throws IOException

FileOutputStream Class
		try{    
             FileOutputStream fout=new FileOutputStream("D:\\testout.txt");    
             String s="Welcome to javaTpoint.";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
             System.out.println("success...");    
            }catch(Exception e){System.out.println(e);}   
			
FileInputStream Class
		 try{    
            FileInputStream fin=new FileInputStream("D:\\testout.txt");    
            int i=0;    
            while((i=fin.read())!=-1){    
             System.out.print((char)i);    
            }    
            fin.close();    
          }catch(Exception e){System.out.println(e);}


File Class
The File class is an abstract representation of file and directory pathname.
The File class have several methods for working with directories and files such as creating new directories or files, deleting and renaming directories or files, listing the contents of a directory etc.

  File file = new File("javaFile123.txt");  
           file.createNewFile()

File dir=new File("/Users/sonoojaiswal/Documents");  
    File files[]=dir.listFiles();  
    for(File file:files){  
        System.out.println(file.getName()+" Can Write: "+file.canWrite()+"   
        Is Hidden: "+file.isHidden()+" Length: "+file.length()+" bytes");  
    }  

Disadvantages
Read one character at a time
no new line automatically done.

BufferWriter
============
FileWriter writer = new FileWriter("D:\\testout.txt");  
    BufferedWriter buffer = new BufferedWriter(writer);  
    buffer.write("Welcome to javaTpoint."); 
	buffer.newLine();
	buffer.write("Welcome to javaTpoint."); 	
    buffer.close();
	
BufferReader
============
 FileReader fr=new FileReader("D:\\testout.txt");    
          BufferedReader br=new BufferedReader(fr);    
          String line = br.readLine();    
          while((line!=null){  
          System.out.print(line);  
          }  
          br.close();    
    }    	
		  
By using FW and BW we can write only character data to the file but by using PW we can write any type of data to file.

PrintWriter
===========
 FileWriter writer = new FileWriter("D:\\testout.txt");  
 PrintWriter out = new PrintWriter(writer);  
 out.write(100);
 out.println(100);
 out.flush();
 out.close();
